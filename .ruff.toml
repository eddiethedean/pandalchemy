# Ruff configuration for pandalchemy

# Target Python 3.9+
target-version = "py39"

# Line length
line-length = 100

[lint]
# Enable various rule categories
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
]

# Ignore specific rules
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "C901",   # Too complex
]

# Allow fix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Exclude directories
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["ARG", "E721", "B017", "E712", "SIM105", "B011", "B007"]  # Allow unused arguments, type comparisons, broad catches, False comparisons, try-except-pass, assert False, unused loop vars in tests
"src/pandalchemy/tracked_dataframe.py" = ["SIM102", "B904"]  # Allow nested if in elif blocks and raise without from
"src/pandalchemy/change_tracker.py" = ["C401"]  # Allow generator in set() for clarity
"src/pandalchemy/sql_operations.py" = ["SIM108"]  # Allow if-else for set_index clarity
"src/pandalchemy/pandalchemy_base.py" = ["SIM102"]  # Allow nested if for clarity

[lint.isort]
known-first-party = ["pandalchemy"]

